diff --git a/sys/arm/xilinx/zy7_qspi.c b/sys/arm/xilinx/zy7_qspi.c
index 1915f93608ba..fe46086eadb6 100644
--- a/sys/arm/xilinx/zy7_qspi.c
+++ b/sys/arm/xilinx/zy7_qspi.c
@@ -59,11 +59,16 @@ __FBSDID("$FreeBSD$");
 
 #include <dev/flash/mx25lreg.h>
 
+#ifdef EXT_RESOURCES
+#include <dev/extres/clk/clk.h>
+#endif
+
 #include "spibus_if.h"
 
 static struct ofw_compat_data compat_data[] = {
 	{"xlnx,zy7_qspi",		1},
 	{"xlnx,zynq-qspi-1.0",		1},
+	{"xlnx,zynqmp-qspi-1.0",	1},
 	{NULL,				0}
 };
 
@@ -77,8 +82,11 @@ struct zy7_qspi_softc {
 
 	uint32_t		cfg_reg_shadow;
 	uint32_t		lqspi_cfg_shadow;
-	uint32_t		spi_clock;
-	uint32_t		ref_clock;
+	uint32_t		spi_clk_freq;
+#ifdef EXT_RESOURCES
+	clk_t			ref_clk;
+#endif
+	uint32_t		ref_clk_freq;
 	unsigned int		spi_clk_real_freq;
 	unsigned int		rx_overflows;
 	unsigned int		tx_underflows;
@@ -95,7 +103,7 @@ struct zy7_qspi_softc {
 	int			is_dio;
 };
 
-#define ZY7_QSPI_DEFAULT_SPI_CLOCK	50000000
+#define ZY7_QSPI_DEFAULT_SPI_CLK_FREQ	50000000
 
 #define QSPI_SC_LOCK(sc)		mtx_lock(&(sc)->sc_mtx)
 #define	QSPI_SC_UNLOCK(sc)		mtx_unlock(&(sc)->sc_mtx)
@@ -435,15 +443,16 @@ zy7_qspi_init_hw(struct zy7_qspi_softc *sc)
 
 	/* Find best clock divider. */
 	baud_div = 0;
-	while ((sc->ref_clock >> (baud_div + 1)) > sc->spi_clock &&
+	while ((sc->ref_clk_freq >> (baud_div + 1)) > sc->spi_clk_freq &&
 	       baud_div < 8)
 		baud_div++;
 	if (baud_div >= 8) {
-		device_printf(sc->dev, "cannot configure clock divider: ref=%d"
-		    " spi=%d.\n", sc->ref_clock, sc->spi_clock);
+		device_printf(sc->dev,
+		    "cannot configure clock divider: ref=%d spi=%d.\n",
+		    sc->ref_clk_freq, sc->spi_clk_freq);
 		return (EINVAL);
 	}
-	sc->spi_clk_real_freq = sc->ref_clock >> (baud_div + 1);
+	sc->spi_clk_real_freq = sc->ref_clk_freq >> (baud_div + 1);
 
 	/*
 	 * If divider is 2 (the max speed), use internal loopback master
@@ -535,6 +544,9 @@ zy7_qspi_attach(device_t dev)
 	int rid, err;
 	phandle_t node;
 	pcell_t cell;
+#ifdef EXT_RESOURCES
+	uint64_t freq;
+#endif
 
 	sc = device_get_softc(dev);
 	sc->dev = dev;
@@ -544,15 +556,27 @@ zy7_qspi_attach(device_t dev)
 	/* Get ref-clock, spi-clock, and other properties. */
 	node = ofw_bus_get_node(dev);
 	if (OF_getprop(node, "ref-clock", &cell, sizeof(cell)) > 0)
-		sc->ref_clock = fdt32_to_cpu(cell);
+		sc->ref_clk_freq = fdt32_to_cpu(cell);
+#ifdef EXT_RESOURCES
+	else if (clk_get_by_ofw_name(dev, 0, "ref_clk", &sc->ref_clk) == 0) {
+		if ((err = clk_enable(sc->ref_clk)) != 0)
+			device_printf(dev, "Cannot enable clock. err=%d.\n",
+			    err);
+		else if ((err = clk_get_freq(sc->ref_clk, &freq)) != 0)
+			device_printf(dev,
+			    "Cannot get clock frequency. err=%d.\n", err);
+		else
+			sc->ref_clk_freq = (uint32_t)freq;
+	}
+#endif
 	else {
-		device_printf(dev, "must have ref-clock property\n");
+		device_printf(dev, "must have reference clock property.\n");
 		return (ENXIO);
 	}
 	if (OF_getprop(node, "spi-clock", &cell, sizeof(cell)) > 0)
-		sc->spi_clock = fdt32_to_cpu(cell);
+		sc->spi_clk_freq = fdt32_to_cpu(cell);
 	else
-		sc->spi_clock = ZY7_QSPI_DEFAULT_SPI_CLOCK;
+		sc->spi_clk_freq = ZY7_QSPI_DEFAULT_SPI_CLK_FREQ;
 	if (OF_getprop(node, "is-stacked", &cell, sizeof(cell)) > 0 &&
 	    fdt32_to_cpu(cell) != 0) {
 		sc->is_dual = 1;
@@ -645,6 +669,13 @@ zy7_qspi_detach(device_t dev)
 		bus_release_resource(dev, SYS_RES_MEMORY,
 		    rman_get_rid(sc->mem_res), sc->mem_res);
 
+#ifdef EXT_RESOURCES
+	if (sc->ref_clk != NULL) {
+		clk_release(sc->ref_clk);
+		sc->ref_clk = NULL;
+	}
+#endif
+
 	QSPI_SC_LOCK_DESTROY(sc);
 
 	return (0);
diff --git a/sys/arm/xilinx/zy7_spi.c b/sys/arm/xilinx/zy7_spi.c
index 187be191c793..a6b6637257c2 100644
--- a/sys/arm/xilinx/zy7_spi.c
+++ b/sys/arm/xilinx/zy7_spi.c
@@ -52,11 +52,16 @@ __FBSDID("$FreeBSD$");
 #include <dev/spibus/spi.h>
 #include <dev/spibus/spibusvar.h>
 
+#ifdef EXT_RESOURCES
+#include <dev/extres/clk/clk.h>
+#endif
+
 #include "spibus_if.h"
 
 static struct ofw_compat_data compat_data[] = {
 	{"xlnx,zy7_spi",		1},
 	{"xlnx,zynq-spi-1.0",		1},
+	{"xlnx,zynq-spi-r1p6",		1},
 	{"cdns,spi-r1p6",		1},
 	{NULL,				0}
 };
@@ -70,8 +75,11 @@ struct zy7_spi_softc {
 	void			*intrhandle;
 
 	uint32_t		cfg_reg_shadow;
-	uint32_t		spi_clock;
-	uint32_t		ref_clock;
+	uint32_t		spi_clk_freq;
+#ifdef EXT_RESOURCES
+	clk_t			ref_clk;
+#endif
+	uint32_t		ref_clk_freq;
 	unsigned int		spi_clk_real_freq;
 	unsigned int		rx_overflows;
 	unsigned int		tx_underflows;
@@ -85,7 +93,7 @@ struct zy7_spi_softc {
 	int			busy;
 };
 
-#define ZY7_SPI_DEFAULT_SPI_CLOCK	50000000
+#define ZY7_SPI_DEFAULT_SPI_CLK_FREQ	50000000
 
 #define SPI_SC_LOCK(sc)		mtx_lock(&(sc)->sc_mtx)
 #define	SPI_SC_UNLOCK(sc)		mtx_unlock(&(sc)->sc_mtx)
@@ -302,15 +310,16 @@ zy7_spi_init_hw(struct zy7_spi_softc *sc)
 
 	/* Find best clock divider. Divide by 2 not supported. */
 	baud_div = 1;
-	while ((sc->ref_clock >> (baud_div + 1)) > sc->spi_clock &&
+	while ((sc->ref_clk_freq >> (baud_div + 1)) > sc->spi_clk_freq &&
 	    baud_div < 8)
 		baud_div++;
 	if (baud_div >= 8) {
-		device_printf(sc->dev, "cannot configure clock divider: ref=%d"
-		    " spi=%d.\n", sc->ref_clock, sc->spi_clock);
+		device_printf(sc->dev,
+		    "cannot configure clock divider: ref=%d spi=%d.\n",
+		    sc->ref_clk_freq, sc->spi_clk_freq);
 		return (EINVAL);
 	}
-	sc->spi_clk_real_freq = sc->ref_clock >> (baud_div + 1);
+	sc->spi_clk_real_freq = sc->ref_clk_freq >> (baud_div + 1);
 
 	/* Set up configuration register. */
 	sc->cfg_reg_shadow =
@@ -384,6 +393,9 @@ zy7_spi_attach(device_t dev)
 	int rid, err;
 	phandle_t node;
 	pcell_t cell;
+#ifdef EXT_RESOURCES
+	uint64_t freq;
+#endif
 
 	sc = device_get_softc(dev);
 	sc->dev = dev;
@@ -393,15 +405,27 @@ zy7_spi_attach(device_t dev)
 	/* Get ref-clock and spi-clock properties. */
 	node = ofw_bus_get_node(dev);
 	if (OF_getprop(node, "ref-clock", &cell, sizeof(cell)) > 0)
-		sc->ref_clock = fdt32_to_cpu(cell);
+		sc->ref_clk_freq = fdt32_to_cpu(cell);
+#ifdef EXT_RESOURCES
+	else if (clk_get_by_ofw_name(dev, 0, "ref_clk", &sc->ref_clk) == 0) {
+		if ((err = clk_enable(sc->ref_clk)) != 0)
+			device_printf(dev, "Cannot enable clock. err=%d.\n",
+			    err);
+		else if ((err = clk_get_freq(sc->ref_clk, &freq)) != 0)
+			device_printf(dev,
+			    "Cannot get clock frequency. err=%d.\n", err);
+		else
+			sc->ref_clk_freq = (uint32_t)freq;
+	}
+#endif
 	else {
-		device_printf(dev, "must have ref-clock property\n");
+		device_printf(dev, "must have reference clock property.\n");
 		return (ENXIO);
 	}
 	if (OF_getprop(node, "spi-clock", &cell, sizeof(cell)) > 0)
-		sc->spi_clock = fdt32_to_cpu(cell);
+		sc->spi_clk_freq = fdt32_to_cpu(cell);
 	else
-		sc->spi_clock = ZY7_SPI_DEFAULT_SPI_CLOCK;
+		sc->spi_clk_freq = ZY7_SPI_DEFAULT_SPI_CLK_FREQ;
 
 	/* Get memory resource. */
 	rid = 0;
@@ -484,6 +508,13 @@ zy7_spi_detach(device_t dev)
 		bus_release_resource(dev, SYS_RES_MEMORY,
 		    rman_get_rid(sc->mem_res), sc->mem_res);
 
+#ifdef EXT_RESOURCES
+	if (sc->ref_clk != NULL) {
+		clk_release(sc->ref_clk);
+		sc->ref_clk = NULL;
+	}
+#endif
+
 	SPI_SC_LOCK_DESTROY(sc);
 
 	return (0);
@@ -513,7 +544,7 @@ zy7_spi_transfer(device_t dev, device_t child, struct spi_command *cmd)
 	spibus_get_cs(child, &cs);
 	cs &= ~SPIBUS_CS_HIGH;
 	if (cs > 2) {
-		device_printf(dev, "Invalid chip select %d requested by %s",
+		device_printf(dev, "Invalid chip select %d requested by %s.\n",
 		    cs, device_get_nameunit(child));
 		return (EINVAL);
 	}
diff --git a/sys/dev/sdhci/sdhci_fdt.c b/sys/dev/sdhci/sdhci_fdt.c
index f7e6eb27d180..c3a95b53ab01 100644
--- a/sys/dev/sdhci/sdhci_fdt.c
+++ b/sys/dev/sdhci/sdhci_fdt.c
@@ -73,7 +73,7 @@ __FBSDID("$FreeBSD$");
 #define	MAX_SLOTS		6
 #define	SDHCI_FDT_ARMADA38X	1
 #define	SDHCI_FDT_GENERIC	2
-#define	SDHCI_FDT_XLNX_ZY7	3
+#define	SDHCI_FDT_XLNX_ZYNQ	3
 #define	SDHCI_FDT_QUALCOMM	4
 #define	SDHCI_FDT_RK3399	5
 
@@ -94,7 +94,9 @@ static struct ofw_compat_data compat_data[] = {
 	{ "sdhci_generic",		SDHCI_FDT_GENERIC },
 	{ "qcom,sdhci-msm-v4",		SDHCI_FDT_QUALCOMM },
 	{ "rockchip,rk3399-sdhci-5.1",	SDHCI_FDT_RK3399 },
-	{ "xlnx,zy7_sdhci",		SDHCI_FDT_XLNX_ZY7 },
+	{ "xlnx,zy7_sdhci",		SDHCI_FDT_XLNX_ZYNQ },
+	{ "arasan,sdhci-8.9a",		SDHCI_FDT_XLNX_ZYNQ },
+	{ "xlnx,zynqmp-8.9a",		SDHCI_FDT_XLNX_ZYNQ },
 	{ NULL, 0 }
 };
 
@@ -112,6 +114,7 @@ struct sdhci_fdt_softc {
 	struct resource	*mem_res[MAX_SLOTS];	/* Memory resource */
 
 	bool		wp_inverted;	/* WP pin is inverted */
+	bool		wp_disabled;	/* disable WP altogether */
 	bool		no_18v;		/* No 1.8V support */
 
 	clk_t		clk_xin;	/* xin24m fixed clock */
@@ -401,7 +404,8 @@ sdhci_fdt_get_ro(device_t bus, device_t dev)
 {
 	struct sdhci_fdt_softc *sc = device_get_softc(bus);
 
-	return (sdhci_generic_get_ro(bus, dev) ^ sc->wp_inverted);
+	return (!sc->wp_disabled && (sdhci_generic_get_ro(bus, dev) ^
+				     sc->wp_inverted));
 }
 
 static int
@@ -435,9 +439,9 @@ sdhci_fdt_probe(device_t dev)
 	case SDHCI_FDT_RK3399:
 		device_set_desc(dev, "Rockchip RK3399 fdt SDHCI controller");
 		break;
-	case SDHCI_FDT_XLNX_ZY7:
+	case SDHCI_FDT_XLNX_ZYNQ:
 		sc->quirks = SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK;
-		device_set_desc(dev, "Zynq-7000 generic fdt SDHCI controller");
+		device_set_desc(dev, "Zynq generic fdt SDHCI controller");
 		break;
 	default:
 		return (ENXIO);
@@ -456,6 +460,8 @@ sdhci_fdt_probe(device_t dev)
 		sc->no_18v = true;
 	if (OF_hasprop(node, "wp-inverted"))
 		sc->wp_inverted = true;
+	if (OF_hasprop(node, "disable-wp"))
+		sc->wp_disabled = true;
 
 	return (0);
 }
@@ -486,6 +492,20 @@ sdhci_fdt_attach(device_t dev)
 			device_printf(dev, "Cannot init RK3399 SDHCI\n");
 			return (err);
 		}
+	} else if (ofw_bus_search_compatible(dev, compat_data)->ocd_data ==
+	    SDHCI_FDT_XLNX_ZYNQ) {
+		int64_t freq;
+
+		if (clk_get_by_ofw_name(dev, 0, "clk_xin", &sc->clk_xin) != 0)
+			device_printf(dev, "Cannot get clk_xin.\n");
+		else if ((err = clk_enable(sc->clk_xin)) != 0)
+			device_printf(dev, "Cannot enable clk_xin. err=%d.\n",
+			    err);
+		else if ((err = clk_get_freq(sc->clk_xin, &freq)) != 0)
+			device_printf(dev,
+			    "Cannot get clk_xin frequency. err=%d.\n", err);
+		else
+			sc->max_clk = (uint32_t)freq;
 	}
 
 	/* Scan all slots. */
@@ -548,6 +568,11 @@ sdhci_fdt_detach(device_t dev)
 		    rman_get_rid(sc->mem_res[i]), sc->mem_res[i]);
 	}
 
+	if (sc->clk_xin != NULL) {
+		clk_release(sc->clk_xin);
+		sc->clk_xin = NULL;
+	}
+
 	return (0);
 }
 
